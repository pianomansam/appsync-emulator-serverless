service: appsync-bootstrap-test
frameworkVersion: '>=1.21.0 <2.0.0'
provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
package:
  exclude:
    - node_modules/**
plugins:
  - serverless-appsync-plugin
custom:
  accountId: 229055845648
  quote: Quote
  appSync:
    name: appsync-bootstrap-test
    authenticationType: AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: us-east-1
      defaultAction: ALLOW
      userPoolId:
        Ref: UserPoolResource
    region: us-east-2
    mappingTemplates:
      - dataSource: QuoteRequest
        type: Query
        field: error
        request: error-request.txt
        response: result-response.txt
      - dataSource: QuoteRequest
        type: Query
        field: QuoteRequestById
        request: byId-request.txt
        response: result-response.txt
      - dataSource: QuoteRequest
        type: Query
        field: QuoteRequest
        request: scan-request.txt
        response: resultItems-response.txt
      - dataSource: QuoteRequest
        type: Mutation
        field: putQuoteRequest
        request: put-request.txt
        response: result-response.txt
      - dataSource: QuoteRequest
        type: Mutation
        field: batchPutQuotes
        request: batchput-request.txt
        response: batchput-response.txt
      - dataSource: QuoteRequest
        type: Mutation
        field: badBatchPutQuotes
        request: badbatchput-request.txt
        response: batchput-response.txt
      - dataSource: QuoteRequest
        type: Mutation
        field: updateQuoteRequest
        request: update-request.txt
        response: result-response.txt
      - dataSource: QuoteRequest
        type: Mutation
        field: deleteQuoteRequest
        request: delete-request.txt
        response: result-response.txt
      - dataSource: SubscriberPassthrough
        type: Subscription
        field: subscribeToPutQuoteRequest
        request: subscribePassthrough-request.txt
        response: result-with-stash-response.vtl
      - dataSource: SubscriberPassthrough
        type: Subscription
        field: neverNotify
        request: subscribePassthrough-request.txt
        response: null-response.txt
      - dataSource: SubscriberPassthrough
        type: Subscription
        field: subscribeWithOptionalArgument
        request: subscribePassthrough-request.txt
        response: result-response.txt
      - dataSource: SubscriberPassthrough
        type: Subscription
        field: subscribeWithRequiredArgument
        request: subscribePassthrough-request.txt
        response: result-response.txt
      - dataSource: SubscriberPassthrough
        type: Subscription
        field: subscribeWithBothArgumentTypes
        request: subscribePassthrough-request.txt
        response: result-response.txt
      - dataSource: QuoteResponse
        type: Query
        field: QuoteResponseById
        request: byId-request.txt
        response: result-response.txt
      - dataSource: QuoteResponse
        type: Query
        field: QuoteResponse
        request: scan-request.txt
        response: resultItems-response.txt
      - dataSource: QuoteResponse
        type: Mutation
        field: putQuoteResponse
        request: put-request.txt
        response: result-response.txt
      - dataSource: QuoteResponse
        type: Mutation
        field: updateQuoteResponse
        request: update-request.txt
        response: result-response.txt
      - dataSource: QuoteResponse
        type: Mutation
        field: deleteQuoteResponse
        request: delete-request.txt
        response: result-response.txt
      - dataSource: SubscriberPassthrough
        type: Subscription
        field: subscribeToPutQuoteResponse
        request: subscribePassthrough-request.txt
        response: result-response.txt
      - dataSource: SubscriberPassthrough
        type: Query
        field: cognitoInfo
        request: subscribePassthrough-request.txt
        response: cognito-response.txt
      - dataSource: TestHTTP
        type: Query
        field: httpUsers
        request: httpUsers-request.vtl
        response: httpUsers-response.vtl
      - dataSource: TestHTTP
        type: httpUser
        field: posts
        request: httpUsers-posts-request.vtl
        response: httpUsers-response.vtl
      - dataSource: TestLambdaJSON
        field: lambda
        type: Query
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambdasJSON
        type: Query
        field: lambdaBatch
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestBatchLambdaJSON
        type: LambdaInfo
        field: lambdaChild
        request: lambda-batch-request.vtl
        response: result-response.txt
      - dataSource: TestLambdaJSON
        type: Query
        field: jsonTest
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: dateTest
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: timeTest
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: dateTimeTest
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: dateTestInput
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: timeTestInput
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: dateTimeTestInput
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: emailTest
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: phoneTest
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestLambda
        type: Query
        field: urlTest
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestPythonLambda
        type: Query
        field: lambdaPython
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestRubyLambda
        type: Query
        field: lambdaRuby
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestGoLambda
        type: Query
        field: lambdaGo
        request: lambda-request.vtl
        response: result-response.txt
      - dataSource: TestElastic
        type: Query
        field: search
        request: es-request.txt
        response: es-response.txt
      - dataSource: TestLambdaJSON
        field: stashTest
        type: Query
        request: lambda-with_stash-request.vtl
        response: result-with-stash-response.vtl
    serviceRole: 'AppSyncServiceRole'
    dataSources:
      - type: AMAZON_DYNAMODB
        name: QuoteRequest
        description: QuoteRequest description
        config:
          tableName: { Ref: QuoteRequestTable }
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: AMAZON_DYNAMODB
        name: ${self:custom.quote}Response
        description: QuoteResponse description
        config:
          tableName: QuoteResponse-emulator
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: NONE
        name: SubscriberPassthrough
        description: Non-datasource datasource
        config:
          serviceRoleArn: { Fn::GetAtt: [AppSyncDynamoDBServiceRole, Arn] }
      - type: AWS_LAMBDA
        name: TestLambda
        description: 'Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: graphql
      - type: AWS_LAMBDA
        name: TestLambdaJSON
        description: 'Lambda JSON DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: graphqlJSON
      - type: AWS_LAMBDA
        name: TestLambdasJSON
        description: 'Lambda JSON array DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdasFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: graphqlArrayJSON
      - type: AWS_LAMBDA
        name: TestBatchLambdaJSON
        description: 'Lambda JSON DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: graphqlBatchJSON
      - type: HTTP
        name: TestHTTP
        description: 'Test HTTP endpoint'
        config:
          endpoint: 'http://localhost:3000'
      - type: AWS_LAMBDA
        name: TestPythonLambda
        description: 'Python Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [PythonLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: pythonGraphQL
      - type: AWS_LAMBDA
        name: TestGoLambda
        description: 'Go Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [GoLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: gographql
      - type: AWS_LAMBDA
        name: TestRubyLambda
        description: 'Ruby Lambda DataSource'
        config:
          lambdaFunctionArn: { Fn::GetAtt: [RubyLambdaFunction, Arn] }
          serviceRoleArn: { Fn::GetAtt: [AppSyncLambdaServiceRole, Arn] }
          functionName: rubyGraphQL
      - type: AMAZON_ELASTICSEARCH
        name: TestElastic
        config:
          endpoint: 'http://localhost:9200'
functions:
  graphqlJSON:
    handler: handler.graphqlJSON
  graphqlArrayJSON:
    handler: handler.graphqlArrayJSON
  graphqlBatchJSON:
    handler: handler.graphqlBatchJSON
  graphql:
    handler: handler.graphql
  emptyJSON:
    handler: handler.emptyJSON
    runtime: python3.6
  composedJSON:
    handler: handler.composedJSON
    runtime: python3.6
  error:
    handler: handler.error
    runtime: python3.6
  pythonGraphQL:
    handler: handler.pythonGraphQL
    runtime: python3.6
  goemptyjson:
    handler: goemptyjson
    runtime: go1.x
  gocomposedjson:
    handler: gocomposedjson
    runtime: go1.x
  goerror:
    handler: goerror
    runtime: go1.x
  gographql:
    handler: gographql
    runtime: go1.x
  rubyemptyjson:
    handler: handler.ruby_empty_json
    runtime: ruby2.5
  rubycomposedjson:
    handler: handler.ruby_composed_json
    runtime: ruby2.5
  rubyerror:
    handler: handler.ruby_error
    runtime: ruby2.5
  rubybroken:
    handler: handler.ruby_broken_function
    runtime: ruby2.5
  rubyGraphQL:
    handler: handler.ruby_graphqL
    runtime: ruby2.5
resources:
  Resources:
    QuoteRequestTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: QuoteRequest-emulator
    QuoteResponseTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: QuoteResponse-emulator
    AppSyncLambdaServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: Lambda-${self:custom.appSync.serviceRole}-${self:service}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'Lambda-${self:custom.appSync.serviceRole}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'lambda:invokeFunction'
                  Resource:
                    - { Fn::GetAtt: [GraphqlLambdaFunction, Arn] }

    AppSyncDynamoDBServiceRole:
      Type: 'AWS::IAM::Role'
      Properties:
        RoleName: 'Dynamo-${self:custom.appSync.serviceRole}-${self:service}'
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Service:
                  - 'appsync.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
        Policies:
          - PolicyName: 'Dynamo-${self:custom.appSync.serviceRole}-${self:service}-Policy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'dynamodb:Query'
                    - 'dynamodb:BatchGetItem'
                    - 'dynamodb:BatchWriteItem'
                    - 'dynamodb:GetItem'
                    - 'dynamodb:DeleteItem'
                    - 'dynamodb:PutItem'
                    - 'dynamodb:Scan'
                    - 'dynamodb:UpdateItem'
                  Resource:
                    - 'arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/QuoteResponse-emulator'
                    - 'arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/QuoteResponse-emulator/*'
                    - 'arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/QuoteRequest-emulator'
                    - 'arn:aws:dynamodb:us-east-1:${self:custom.accountId}:table/QuoteRequest-emulator/*'
